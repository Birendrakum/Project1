AWSTemplateFormatVersion: "2010-09-09"
Description: "Here are the steps to set up an AWS project using Auto Scaling Groups (ASG), EC2 instances, and an Elastic Load Balancer (ELB):"

Resources:
  MyVPC:  
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "192.168.10.0/24"
      EnableDnsHostnames: true   # Every EC2 gets a default hostname based on its private IP
      EnableDnsSupport: true     # AWS runs a DNS resolver in your VPC
      Tags:
        - Key: Name
          Value: MyVPC

  privateA: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "192.168.10.0/26"
      MapPublicIpOnLaunch: false
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: "pvt-a"
  
  privateB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "192.168.10.64/26"
      MapPublicIpOnLaunch: false
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: "pvt-b"
  
  publicA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "192.168.10.128/26"
      MapPublicIpOnLaunch: true
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: "pub-a"
  
  publicB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "192.168.10.192/26"
      MapPublicIpOnLaunch: true
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: "pub-b"

  RouterPub:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  RouterPvt:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  MySubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicA
      RouteTableId: !Ref RouterPub

  MySubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicB
      RouteTableId: !Ref RouterPub
  
  MySubnetAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateA
      RouteTableId: !Ref RouterPvt

  MySubnetAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateB
      RouteTableId: !Ref RouterPvt

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PubRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouterPub
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: EIP
    
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyEIP.AllocationId
      SubnetId: !Ref publicA

  PvtRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouterPvt
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway

  SgLB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow Internet"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"

  SgWebapp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SgLB


  InternetLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: InternetLB
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SgLB
      Subnets:
        - !Ref publicA
        - !Ref publicB

  PrivateInstanceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: TargetGroup
      VpcId: !Ref MyVPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
        
  LoadbalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref InternetLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PrivateInstanceTargetGroup

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "MyEc2Template"
      LaunchTemplateData:
        ImageId: "ami-0953476d60561c955"
        InstanceType: "t2.micro"
        KeyName: "pem-key"
        SecurityGroupIds:
          - !Ref SgWebapp
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            systemctl restart httpd


  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref privateA
        - !Ref privateB
      TargetGroupARNs:
        - !Ref PrivateInstanceTargetGroup
      MinSize: 1
      MaxSize: 4
      MetricsCollection:
        - Granularity: "1Minute"

  CPUAlarmHigh:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "Scale out when CPU usage exceeds 70%"
      MetricName: "CPUUtilization"
      Namespace: "AWS/EC2"
      Statistic: "Average"
      Period: 60
      EvaluationPeriods: 1
      Threshold: 70
      ComparisonOperator: "GreaterThanThreshold"
      AlarmActions:
        - !Ref ScaleOutPolicy
      Dimensions:
        - Name: "AutoScalingGroupName"
          Value: !Ref AutoScalingGroup

  CPUAlarmLow:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "Scale In when CPU usage below 50%"
      MetricName: "CPUUtilization"
      Namespace: "AWS/EC2"
      Statistic: "Average"
      Period: 60
      EvaluationPeriods: 1
      Threshold: 50
      ComparisonOperator: "LessThanThreshold"
      AlarmActions:
        - !Ref ScaleInPolicy
      Dimensions:
        - Name: "AutoScalingGroupName"
          Value: !Ref AutoScalingGroup

  ScaleOutPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      AdjustmentType: "ChangeInCapacity"
      ScalingAdjustment: 2
      Cooldown: 120

  ScaleInPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      AdjustmentType: "ChangeInCapacity"
      ScalingAdjustment: -1
      Cooldown: 120    

